import matplotlib
from NNclasses import *
from POSTclass import *
import numpy as np
from scipy.special import softmax
import matplotlib
import matplotlib.pyplot as plt


act = ActivationLayer(2, 'sigmoid')

fake_affine_weights = np.random.rand(2, 2)
#print(fake_affine_weights)

X_train = np.array([[1, 1],[1, -1],[-1, 1],[-1, -1]])
y_train = np.array([0, 1, 1, 0])
#print(y_train.size)

milp = MLP([40], ['relu'], 2, 2)
print(milp)
forward = milp.forward_propagation(X_train)
print('forward, ', forward)
back = milp.back_propagation(forward, y_train)
print('backwardL ', back)
milp.update(0.1)

#milp.fit(X_train, y_train, 4, 1, 10000)

print(milp.predict(X_train))


pos = POSTagger(pathlib.Path('NN-from-scratch/surf.sequoia.train'), [32], ['relu'], 40, 5)
train_scores, dev_scores = pos.fit(pathlib.Path('NN-from-scratch/surf.sequoia.train'), 10, 0.01, 20)
print(train_scores, dev_scores)
print(len(train_scores))
print(pos.test(pathlib.Path('NN-from-scratch/surf.sequoia.test')))


